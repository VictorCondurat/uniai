generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
  VIEWER
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  password               String?
  name                   String?
  role                   String    @default("user")
  image                  String?
  verified               Boolean   @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  ownedProjects Project[]       @relation("OwnedProjects")
  memberships   ProjectMember[]

  accounts         Account[]
  sessions         Session[]
  apiKeys          ApiKey[]
  usage            Usage[]
  invoices         Invoice[]
  alerts           Alert[]
  auditLogs        AuditLog[]
  costAlerts       CostAlert[]
  autoModelEnabled Boolean         @default(false)
  fallbackChains   FallbackChain[]
  sentInvitations ProjectInvitation[]

  @@map("users")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      ProjectRole @default(MEMBER)
  permissions Json?     // e.g., { "keys": ["read", "create"], "billing": ["read"] }
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectInvitation {
  id          String      @id @default(cuid())
  email       String
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role        ProjectRole
  permissions Json?
  token       String      @unique
  expires     DateTime
  invitedById String
  invitedBy   User        @relation(fields: [invitedById], references: [id])
  createdAt   DateTime    @default(now())

  @@unique([email, projectId])
  @@map("project_invitations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?

  ownerId       String
  owner         User   @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  totalSpendingLimit Float?

  members ProjectMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags          String[]  @default([])
  allowedModels     String[] @default([]) // Optional array to override API key model settings.
  defaultFallbackChainId String? // ID of the fallback chain to use by default for this project.

  apiKeys        ApiKey[]
  usage          Usage[]
  fallbackChains FallbackChain[]
  invitations ProjectInvitation[]
  @@map("projects")
}

model ApiKey {
  id    String @id @default(cuid())
  name  String


  hashedKey String @unique
  keyPrefix String

  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  active    Boolean   @default(true)
  revokedAt DateTime?

  created   DateTime  @default(now())
  expires   DateTime?
  lastUsed  DateTime?

  totalUsageLimit   Float?
  monthlyUsageLimit Float?
  dailyUsageLimit   Float?

  maxCostPerRequest Float?
  rateLimitConfig   Json?

  permissions Json?

  ipWhitelist       String[]
  domainWhitelist   String[] @default([])

  models    String[]
  metadata  Json?


  usage Usage[]
  @@map("api_keys")
}

model FallbackChain {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  name        String
  description String?
  type        String   @default("standard")

  triggers    Json
  steps       Json
  active      Boolean  @default(true)
  priority    Int      @default(0)

  executionCount Int       @default(0)
  successCount   Int       @default(0)
  lastExecuted   DateTime?
  avgSavings     Float?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  executions FallbackExecution[]

  @@index([userId, active])
  @@index([projectId, active])
  @@map("fallback_chains")
}

model FallbackExecution {
  id             String   @id @default(cuid())
  chainId        String
  chain          FallbackChain @relation(fields: [chainId], references: [id], onDelete: Cascade)
  requestId      String   @unique
  primaryModel   String
  triggerType    String
  triggerDetails Json?
  stepsExecuted  Json
  finalModel     String?
  success        Boolean
  totalLatency   Int
  primaryCost    Float
  actualCost     Float
  costSaved      Float?
  timestamp      DateTime @default(now())

  @@index([chainId, timestamp])
  @@index([triggerType, timestamp])
  @@map("fallback_executions")
}

model Usage {
  id           String   @id @default(cuid())
  apiKeyId     String
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Restrict)
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  projectId    String?
  project      Project? @relation(fields: [projectId], references: [id])
  timestamp    DateTime @default(now())
  provider     String
  model        String
  tokensInput  Int
  tokensOutput Int
  cost         Float
  markup       Float
  totalCost    Float
  requestId    String   @unique
  success      Boolean
  latency      Int
  endpoint     String
  cached       Boolean  @default(false)
  cacheHit     Boolean  @default(false)
  modelChainId String?
  metadata     Json?

  @@index([timestamp, apiKeyId])
  @@index([userId, timestamp])
  @@index([projectId, timestamp])
  @@map("usage")
}


model Invoice {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceNumber String   @unique
  amount        Float
  subtotal      Float
  vatAmount     Float
  markupAmount  Float
  currency      String
  status        String   @default("pending")
  issueDate     DateTime
  dueDate       DateTime
  periodStart   DateTime
  periodEnd     DateTime
  details       Json
  emailSent     Boolean
  emailId       String?
  generatedAt   DateTime @default(now())
  paidAt        DateTime?

  @@map("invoices")
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  user      User?    @relation(fields: [userId], references: [id])
  type      String
  threshold Float
  message   String
  triggered Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("alerts")
}

model CostAlert {
  id            String    @id @default(cuid())
  userId        String
  user          User?     @relation(fields: [userId], references: [id])
  name          String
  type          String
  threshold     Float
  currentSpend  Float     @default(0)
  active        Boolean   @default(true)
  lastTriggered DateTime?
  webhookUrl    String?
  emailAlert    Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("cost_alerts")
}

model PromptCache {
  id           String   @id @default(cuid())
  promptHash   String   @unique
  provider     String
  model        String
  response     Json
  tokensInput  Int
  tokensOutput Int
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  hitCount     Int      @default(0)

  @@index([expiresAt])
  @@map("prompt_cache")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  resource   String
  resourceId String?
  details    Json?

  ipAddress    String?
  userAgent    String?
  geoLocation  Json?
  requestId    String?
  requestType  String?

  timestamp  DateTime @default(now())

  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([resource, timestamp])
  @@index([ipAddress, timestamp])
  @@index([requestId])
  @@map("audit_logs")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model ModelProviderInfo {
  id          String             @id @default(cuid())
  providerId  String             @unique
  name        String
  iconUrl     String?
  description String?
  models      ModelDescription[]

  @@map("model_provider_info")
}

model ModelDescription {
  id                String            @id @default(cuid())
  modelIdentifier   String
  name              String
  providerInfoId    String
  provider          ModelProviderInfo @relation(fields: [providerInfoId], references: [id])
  description       String
  capabilities      String[]
  contextWindow     String?
  pricingInfo       String?
  status            String            @default("available")
  inputModalities   String[]          @default(["text"])
  outputModalities  String[]          @default(["text"])
  isFineTuneable    Boolean           @default(false)
  displayOrder      Int?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([providerInfoId, modelIdentifier])
  @@map("model_descriptions")
}