generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  password               String?
  name                   String?
  role                   String   @default("user") // "admin", "user", etc.
  image                  String?
  verified               Boolean   @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  apiKeys  ApiKey[]
  usage    Usage[]
  invoices Invoice[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  key       String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime?

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage Usage[]

  @@map("api_keys")
}

model Usage {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  apiKeyId    String   @map("api_key_id")
  model       String
  provider    String
  tokens      Int
  cost        Float
  requestType String   @map("request_type")
  createdAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiKey ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@map("usage")
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  amount      Float
  period      String
  status      String   @default("pending")
  generatedAt DateTime @default(now())
  paidAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}